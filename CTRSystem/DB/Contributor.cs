using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Timers;
using CTRSystem.Extensions;
using TShockAPI;

namespace CTRSystem.DB
{
	public class Contributor
	{
		/// <summary>
		/// List of user account IDs authenticated with this contributor object.
		/// </summary>
		public List<int> Accounts { get; set; }

		public int? XenforoID { get; set; }

		public float TotalCredits { get; set; }

		/// <summary>
		/// The date of the last donation made by the contributor.
		/// Always convert to string in the sortable ("s") DateTime format.
		/// </summary>
		public DateTime LastDonation { get; set; }

		/// <summary>
		/// The amount of credits generated by the contributor's last donation.
		/// </summary>
		public float LastAmount { get; set; }

		public int Tier { get; set; }

		public Color? ChatColor { get; set; }

		public Notifications Notifications { get; set; }

		public Settings Settings { get; set; }

		/// <summary>
		/// Local-only variable used to keep the contributor's data synced.
		/// </summary>
		public bool Synced { get; set; }

		public Contributor(params int[] accounts)
		{
			Accounts = new List<int>(accounts);
		}

		public static Contributor Parse(params string[] accounts)
		{
			List<int> parsed = new List<int>();
			int userID;
			for (int i = 0; i < accounts.Length; i++)
			{
				if (Int32.TryParse(accounts[i], out userID))
				{
					parsed.Add(userID);
				}
			}
			return new Contributor(parsed.ToArray());
		}

		/// <summary>
		/// Initializes all active user accounts.
		/// </summary>
		public void InitializeAll()
		{
			if (Accounts.Count > 0)
			{
				TShock.Players.Where(p => p != null && p.Active
				&& p.IsLoggedIn && Accounts.Contains(p.User.ID)).ForEach(p =>
				{
					Initialize(p.Index);
				});
			}
		}

		/// <summary>
		/// Initializes the contributor object for a given player.
		/// </summary>
		public void Initialize(int playerID)
		{
			if (TShock.Players[playerID] == null)
				throw new NullReferenceException($"player slot {playerID} was null");

			if (!TShock.Players[playerID].Active || !TShock.Players[playerID].IsLoggedIn || !TShock.Players[playerID].IsAuthenticated())
				return;

			if (CTRS.Timers[playerID] != null && CTRS.Timers[playerID].Enabled)
			{
				// Stop the timer in case it was already running
				CTRS.Timers[playerID].Stop();
			}

			CTRS.Timers[playerID] = new Timer(CTRS.Config.NotificationDelaySeconds * 1000);
			CTRS.Timers[playerID].Elapsed += async (object sender, ElapsedEventArgs args) =>
			{
				if (CTRS.Timers[playerID].Interval != CTRS.Config.NotificationCheckSeconds * 1000)
					CTRS.Timers[playerID].Interval = CTRS.Config.NotificationCheckSeconds * 1000;

				// Do Update Notifications
				await CTRS.UpdateNotifications(TShock.Players[playerID], this);
			};
			CTRS.Timers[playerID].Start();
		}
	}
}
