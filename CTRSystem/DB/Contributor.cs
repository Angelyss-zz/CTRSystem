using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CTRSystem.Configuration;
using TShockAPI;
using TShockAPI.DB;
using CTRSystem.Extensions;

namespace CTRSystem.DB
{
	public class Contributor
	{
		public class DataModel
		{
			public int ID { get; set; }

			//public List<int> Accounts

			public int? XenforoID { get; set; }

			public float TotalCredits { get; set; }

			public long? LastDonation { get; set; }

			public float LastAmount { get; set; }

			public int Tier { get; set; }

			public string ChatColor { get; set; }

			public int Notifications { get; set; }

			public int Settings { get; set; }

			public static explicit operator Contributor(DataModel model)
			{
				if (model == null)
					return null;

				return new Contributor(model.ID)
				{
					XenforoId = model.XenforoID,
					TotalCredits = model.TotalCredits,
					LastDonation = model.LastDonation?.FromUnixTime(),
					LastAmount = model.LastAmount,
					Tier = model.Tier,
					ChatColor = Tools.ColorFromRGB(model.ChatColor),
					Notifications = (Notifications)model.Notifications,
					Settings = (Settings)model.Settings
				};
			}

			public static explicit operator DataModel(Contributor contributor)
			{
				if (contributor == null)
					return null;

				return new DataModel
				{
					ID = contributor.Id,
					XenforoID = contributor.XenforoId,
					TotalCredits = contributor.TotalCredits,
					LastDonation = contributor.LastDonation?.ToUnixTime(),
					LastAmount = contributor.LastAmount,
					Tier = contributor.Tier,
					ChatColor = Tools.ColorToRGB(contributor.ChatColor),
					Notifications = (int)contributor.Notifications,
					Settings = (int)contributor.Settings
				};
			}
		}

		private TSPlayer _receiver;
		private CTRS _scope;

		/// <summary>
		/// The key used when storing a contributor object as data.
		/// </summary>
		public const string DataKey = "CTRS_Con";

		/// <summary>
		/// Contributor Id used internally for storage and loading.
		/// </summary>
		public int Id { get; set; }

		/// <summary>
		/// List of user account IDs authenticated with this contributor object.
		/// </summary>
		public List<int> Accounts { get; set; }

		public int? XenforoId { get; set; }

		public float TotalCredits { get; set; }

		/// <summary>
		/// The date of the last donation made by the contributor.
		/// Stored as an Int64 Unix timestamp.
		/// </summary>
		public DateTime? LastDonation { get; set; }

		/// <summary>
		/// The amount of credits generated by the contributor's last donation.
		/// </summary>
		public float LastAmount { get; set; }

		public int Tier { get; set; }

		public Color? ChatColor { get; set; }

		public Notifications Notifications { get; set; }

		public Settings Settings { get; set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="Contributor"/> class with the given
		/// <paramref name="contributorId"/>.
		/// </summary>
		/// <param name="contributorId">The contributor ID in the database.</param>
		public Contributor(int contributorId)
		{
			Accounts = new List<int>();
			Id = contributorId;
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="Contributor"/> class from the given
		/// <paramref name="user"/> account.
		/// </summary>
		/// <param name="user">The user account to be registered to this contributor.</param>
		public Contributor(User user) : this(0)
		{
			Accounts.Add(user.ID);
		}

		private async void OnTransaction(object sender, TransactionEventArgs e)
		{
			if (e.ContributorId == Id)
			{
				LastAmount = e.Credits;
				if (e.Date.HasValue)
					LastDonation = e.Date.Value;
				TotalCredits += e.Credits;

				// If the player is online, notify them about the transaction
				foreach (string s in Texts.SplitIntoLines(
					_scope.Formatter.FormatNewDonation(_receiver, this, LastAmount)))
				{
					_receiver.SendInfoMessage(s);
				}

				// Check for tier upgrades
				int oldTier = Tier;
				await _scope.Tiers.UpgradeTier(this, true);
				if (Tier != oldTier)
				{
					// Delay the message according to the config
					await Task.Delay(_scope.Config.NotificationCheckSeconds);

					foreach (string s in Texts.SplitIntoLines(
						_scope.Formatter.FormatNewTier(_receiver, this, _scope.Tiers.Get(Tier))))
					{
						_receiver.SendInfoMessage(s);
					}
				}

				// Suppress notifications from being set on the database
				e.SuppressNotifications = true;
			}
		}

		private async void OnUpdate(object sender, ContributorUpdateEventArgs e)
		{
			if (e.ContributorId == Id)
			{
				if ((e.Updates & ContributorUpdates.XenforoID) == ContributorUpdates.XenforoID)
					XenforoId = e.XenforoId;

				if ((e.Updates & ContributorUpdates.TotalCredits) == ContributorUpdates.TotalCredits)
					TotalCredits = e.TotalCredits;

				if ((e.Updates & ContributorUpdates.LastDonation) == ContributorUpdates.LastDonation)
					LastDonation = e.LastDonation;

				if ((e.Updates & ContributorUpdates.LastAmount) == ContributorUpdates.LastAmount)
					LastAmount = e.LastAmount;

				// Direct tier update shouldn't be pushed this way
				//if ((e.Updates & ContributorUpdates.Tier) == ContributorUpdates.Tier)
				//	Tier = e.Tier;

				if ((e.Updates & ContributorUpdates.ChatColor) == ContributorUpdates.ChatColor)
					ChatColor = e.ChatColor;

				if ((e.Updates & ContributorUpdates.Settings) == ContributorUpdates.Settings)
					Settings = e.Settings;

				if ((e.Updates & ContributorUpdates.Notifications) == ContributorUpdates.Notifications)
				{
					Notifications = e.Notifications;

					// Update notifications
					await UpdateNotifications();
				}
			}
		}

		/// <summary>
		/// Start listening to contributor related events fired by various contribution modules.
		/// </summary>
		/// <param name="main">The CTRSystem instance scope.</param>
		/// <param name="player">If set, will send notification messages to a player whenever possible.</param>
		public void Listen(CTRS scope, TSPlayer player = null)
		{
			_receiver = player;
			_scope = scope;

			_scope.Rests.ContributorUpdate += OnUpdate;
			_scope.Rests.Transaction += OnTransaction;
		}

		/// <summary>
		///  Stop listening to events. Used when disposing of this contributor object.
		/// </summary>
		public void Unlisten()
		{
			if (_scope != null)
			{
				_scope.Rests.ContributorUpdate -= OnUpdate;
				_scope.Rests.Transaction -= OnTransaction;
			}
		}

		/// <summary>
		/// Returns the database model version of this contributor object.
		/// </summary>
		/// <returns>A <see cref="DataModel"/> containing all relevant information.</returns>
		public DataModel ToDataModel()
		{
			return (DataModel)this;
		}

		public async Task UpdateNotifications()
		{
			if (_receiver == null || _scope == null)
				return;

			ContributorUpdates updates = 0;

			// Upgrade tier before anything else
			await _scope.Tiers.UpgradeTier(this);

			// Initial delay
			await Task.Delay(_scope.Config.NotificationDelaySeconds * 1000);

			// This should only occur once
			if ((Notifications & Notifications.Introduction) != Notifications.Introduction)
			{
				// Do Introduction message
				foreach (string s in Texts.SplitIntoLines(
					_scope.Formatter.FormatIntroduction(_receiver, this)))
				{
					_receiver.SendInfoMessage(s);
				}
				Notifications |= Notifications.Introduction;
				updates |= ContributorUpdates.Notifications;

				// If there are more notifications in the pile, run the regular relay
				if (Notifications != Notifications.Introduction)
					await Task.Delay(_scope.Config.NotificationCheckSeconds * 1000);
			}

			// Regular notification loop (Notifications.Introduction is the regular state for the enum)
			while (Notifications != Notifications.Introduction)
			{
				if ((Notifications & Notifications.NewDonation) == Notifications.NewDonation)
				{
					// Do NewDonation message
					foreach (string s in Texts.SplitIntoLines(
						_scope.Formatter.FormatNewDonation(_receiver, this, LastAmount)))
					{
						_receiver.SendInfoMessage(s);
					}
					Notifications ^= Notifications.NewDonation;
					updates |= ContributorUpdates.Notifications;
				}

				else if ((Notifications & Notifications.NewTier) == Notifications.NewTier)
				{
					// Do Tier Rank Up message
					foreach (string s in Texts.SplitIntoLines(
						_scope.Formatter.FormatNewTier(_receiver, this, _scope.Tiers.Get(Tier))))
					{
						_receiver.SendInfoMessage(s);
					}
					Notifications ^= Notifications.NewTier;
					updates |= ContributorUpdates.Notifications;
				}

				// If there are more notifications in the pile, run the regular relay
				if (Notifications != Notifications.Introduction)
					await Task.Delay(_scope.Config.NotificationCheckSeconds * 1000);
			}

			if (!await _scope.Contributors.UpdateAsync(this, updates) && _scope.Config.LogDatabaseErrors)
				TShock.Log.ConsoleError("CTRS-DB: something went wrong while updating a contributor's notifications.");
		}
	}
}
