using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Timers;
using CTRSystem.Extensions;
using TShockAPI;
using TShockAPI.DB;

namespace CTRSystem.DB
{
	public class Contributor
	{
		/// <summary>
		/// Contributor ID used internally for storage and loading.
		/// </summary>
		public int ID { get; set; }

		/// <summary>
		/// List of user account IDs authenticated with this contributor object.
		/// </summary>
		public List<int> Accounts { get; set; }

		public int? XenforoID { get; set; }

		public float TotalCredits { get; set; }

		/// <summary>
		/// The date of the last donation made by the contributor.
		/// Always convert to string in the sortable ("s") DateTime format.
		/// </summary>
		public DateTime LastDonation { get; set; }

		/// <summary>
		/// The amount of credits generated by the contributor's last donation.
		/// </summary>
		public float LastAmount { get; set; }

		public int Tier { get; set; }

		public Color? ChatColor { get; set; }

		public Notifications Notifications { get; set; }

		public Settings Settings { get; set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="Contributor"/> class with the given
		/// <paramref name="contributorID"/>. Used when loading data from a database.
		/// </summary>
		/// <param name="contributorID">The contributor ID in the database.</param>
		public Contributor(int contributorID)
		{
			Accounts = new List<int>();
			ID = contributorID;
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="Contributor"/> class from the given
		/// <paramref name="user"/> account.
		/// </summary>
		/// <param name="user">The user account to be registered to this contributor.</param>
		public Contributor(User user)
		{
			Accounts = new List<int> { user.ID };

			// Force tier into the first one seeing as tier 0 causes issues
			Tier = 1;
		}

		/// <summary>
		/// Initializes all active user accounts.
		/// </summary>
		public void InitializeAll()
		{
			if (Accounts.Count > 0)
			{
				TShock.Players.Where(p => p != null && p.Active
				&& p.IsLoggedIn && Accounts.Contains(p.User.ID)).ForEach(p =>
				{
					Initialize(p.Index);
				});
			}
		}

		/// <summary>
		/// Initializes the contributor object for a given player.
		/// </summary>
		public void Initialize(int playerID)
		{
			if (playerID < 0 || playerID > Terraria.Main.maxNetPlayers - 1)
				return;

			if (TShock.Players[playerID] == null)
				throw new NullReferenceException($"player slot {playerID} was null");

			if (!TShock.Players[playerID].Active || !TShock.Players[playerID].IsLoggedIn || !TShock.Players[playerID].IsAuthenticated())
				return;

			if (CTRS.Timers[playerID] != null && CTRS.Timers[playerID].Enabled)
			{
				// Stop the timer in case it was already running
				CTRS.Timers[playerID].Stop();
			}

			CTRS.Timers[playerID] = new Timer(CTRS.Config.NotificationDelaySeconds * 1000);
			CTRS.Timers[playerID].Elapsed += async (object sender, ElapsedEventArgs args) =>
			{
				if (CTRS.Timers[playerID].Interval != CTRS.Config.NotificationCheckSeconds * 1000)
					CTRS.Timers[playerID].Interval = CTRS.Config.NotificationCheckSeconds * 1000;

				// Do Update Notifications
				await CTRS.UpdateNotifications(TShock.Players[playerID], this);
			};
			CTRS.Timers[playerID].Start();
		}
	}
}
